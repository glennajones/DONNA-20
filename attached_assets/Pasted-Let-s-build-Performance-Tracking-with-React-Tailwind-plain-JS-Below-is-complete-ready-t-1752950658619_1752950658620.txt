Let‚Äôs üî®ü§ñüîß build Performance Tracking with React + Tailwind + plain JS.
Below is complete, ready-to-run code for both components.

üìÅ src/modules/Performance/EvaluationForm.jsx
jsx
Copy
Edit
import React, { useState } from "react";

const categories = [
  "Serving",
  "Serve Receive",
  "Setting",
  "Blocking",
  "Attacking",
  "Leadership",
  "Communication",
  "Coachability",
];

export default function EvaluationForm() {
  const [scores, setScores] = useState(
    categories.reduce((acc, cat) => ({ ...acc, [cat]: 3 }), {})
  );
  const [weights, setWeights] = useState(
    categories.reduce((acc, cat) => ({ ...acc, [cat]: 1 }), {})
  );
  const [position, setPosition] = useState("");

  const handleScoreChange = (cat, value) => {
    setScores((prev) => ({ ...prev, [cat]: Number(value) }));
  };

  const handleWeightChange = (cat, value) => {
    setWeights((prev) => ({ ...prev, [cat]: Number(value) }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = {
      position,
      scores,
      weights,
    };
    try {
      const res = await fetch("/api/evaluations", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      if (!res.ok) throw new Error("Failed to submit");
      alert("Evaluation submitted ‚úîÔ∏è");
    } catch (err) {
      console.error(err);
      alert("Error submitting ‚ùó");
    }
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="max-w-2xl mx-auto p-4 bg-white shadow rounded space-y-4"
    >
      <h2 className="text-xl font-bold">Player Evaluation Form</h2>
      <div>
        <label className="block text-sm font-medium">Position</label>
        <input
          type="text"
          value={position}
          onChange={(e) => setPosition(e.target.value)}
          className="mt-1 w-full border rounded p-2"
          placeholder="e.g. Outside Hitter"
          required
        />
      </div>

      {categories.map((cat) => (
        <div key={cat} className="grid grid-cols-3 items-center gap-2">
          <label className="font-medium">{cat}</label>
          <select
            value={scores[cat]}
            onChange={(e) => handleScoreChange(cat, e.target.value)}
            className="border p-1 rounded"
          >
            {[1, 2, 3, 4, 5].map((v) => (
              <option key={v} value={v}>
                {v}
              </option>
            ))}
          </select>
          <input
            type="number"
            value={weights[cat]}
            min="0"
            step="0.1"
            onChange={(e) => handleWeightChange(cat, e.target.value)}
            className="border p-1 rounded"
            placeholder="Weight"
          />
        </div>
      ))}

      <button
        type="submit"
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        Submit Evaluation
      </button>
    </form>
  );
}
üìÅ src/modules/Performance/Scoreboard.jsx
jsx
Copy
Edit
import React, { useEffect, useState } from "react";

export default function Scoreboard() {
  const [data, setData] = useState([]);
  const [teams, setTeams] = useState(null);

  const fetchScores = async () => {
    try {
      const res = await fetch("/api/evaluations");
      const json = await res.json();
      setData(json);
    } catch (err) {
      console.error("Failed to fetch scores", err);
    }
  };

  const autoFormTeams = async () => {
    try {
      const res = await fetch("/api/teams/auto", { method: "POST" });
      const json = await res.json();
      setTeams(json);
    } catch (err) {
      console.error("Failed to auto-form teams", err);
    }
  };

  useEffect(() => {
    fetchScores();
  }, []);

  return (
    <div className="p-4 max-w-4xl mx-auto space-y-4">
      <h2 className="text-2xl font-bold">Scoreboard</h2>

      <div className="overflow-x-auto">
        <table className="table-auto border w-full text-left">
          <thead>
            <tr>
              <th className="border p-2">Player</th>
              <th className="border p-2">Composite</th>
              <th className="border p-2">Categories</th>
            </tr>
          </thead>
          <tbody>
            {data.map((player, idx) => (
              <tr key={idx} className="odd:bg-gray-50">
                <td className="border p-2">{player.name || "Unnamed"}</td>
                <td className="border p-2 font-bold">{player.composite?.toFixed(2)}</td>
                <td className="border p-2">
                  <div className="flex flex-wrap gap-2">
                    {Object.entries(player.scores || {}).map(([cat, val]) => (
                      <span
                        key={cat}
                        className="px-2 py-1 bg-gray-200 rounded text-sm"
                      >
                        {cat}: {val}
                      </span>
                    ))}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Simple placeholder chart */}
      <div className="mt-6 p-4 border rounded bg-white shadow">
        <h3 className="text-lg font-semibold mb-2">Chart Visualization</h3>
        <div className="w-full h-40 flex items-center justify-center text-gray-400 border-dashed border-2 border-gray-300 rounded">
          [Chart Placeholder üìä]
        </div>
      </div>

      <button
        onClick={autoFormTeams}
        className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
      >
        Auto-Form Teams
      </button>

      {teams && (
        <div className="mt-4 p-4 border rounded bg-gray-50">
          <h3 className="font-bold">Team Assignments</h3>
          <pre className="whitespace-pre-wrap text-sm mt-2">
            {JSON.stringify(teams, null, 2)}
          </pre>
        </div>
      )}
    </div>
  );
}
üí° Notes:

‚úÖ Uses Tailwind classes for styling.

‚úÖ EvaluationForm handles ratings & weights and submits to /api/evaluations.

‚úÖ Scoreboard fetches from /api/evaluations, displays scores & composite, and allows team auto‚Äëformation with /api/teams/auto.

‚úÖ Placeholder chart included.