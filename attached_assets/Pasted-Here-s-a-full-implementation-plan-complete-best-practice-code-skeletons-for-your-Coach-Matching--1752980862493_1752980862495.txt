Here’s a full implementation plan + complete best‑practice code skeletons for your Coach Matching & Outreach module, covering backend services, API routes, and the React admin dashboard.
Let’s go step by step 🔨🤖🔧

📁 Project Structure
css
Copy
Edit
src/
  services/
    CoachMatchService.js
    CoachOutreachService.js
  api/
    coach-match.js
    coach-outreach.js
  modules/
    Admin/
      PendingOffers.jsx
✅ 1. CoachMatchService.js
js
Copy
Edit
// src/services/CoachMatchService.js
import db from '../utils/db.js'; // hypothetical DB helper

export async function findBestCoaches(eventId, options = {}) {
  const limit = options.limit || 5;

  // Fetch event details
  const event = await db.events.findById(eventId);
  if (!event) throw new Error('Event not found');

  const { requiredSkills, location, dateRange } = event;

  // Fetch all coaches
  const coaches = await db.coaches.findAll();

  // Scoring
  const scored = coaches.map((coach) => {
    let score = 0;

    // Match specialties
    const matchedSpecialties = coach.specialties.filter((s) =>
      requiredSkills.includes(s)
    ).length;
    score += matchedSpecialties * 3;

    // Availability overlap
    const overlap = coach.availabilityWindows.some((win) => {
      return win.start <= dateRange.end && win.end >= dateRange.start;
    });
    if (overlap) score += 2;

    // Past event ratings
    const avgRating =
      coach.pastEventRatings.reduce((a, b) => a + b, 0) /
      (coach.pastEventRatings.length || 1);
    score += avgRating;

    return { ...coach, matchScore: score };
  });

  const sorted = scored.sort((a, b) => b.matchScore - a.matchScore);
  return sorted.slice(0, limit);
}
✅ 2. CoachOutreachService.js
js
Copy
Edit
// src/services/CoachOutreachService.js
import db from '../utils/db.js';
import mustache from 'mustache';
import nodemailer from 'nodemailer';
import twilio from 'twilio';

const transporter = nodemailer.createTransport({ sendmail: true });
const twilioClient = twilio(process.env.TWILIO_SID, process.env.TWILIO_TOKEN);

export async function initiateOutreach(eventId, coachList, config) {
  const event = await db.events.findById(eventId);

  for (const coach of coachList) {
    const message = renderTemplate(config.templates.initial, {
      coachName: coach.name,
      eventName: event.name,
      responseLink: `https://app/coach-response?eventId=${eventId}&coachId=${coach.id}`
    });

    await sendMessage(coach, message);
    await db.coachOutreachLogs.insert({
      coachId: coach.id,
      eventId,
      attemptNumber: 1,
      channel: coach.preferredChannel,
      timestamp: new Date(),
      messageId: `init-${Date.now()}`,
      response: null
    });

    // schedule reminders
    for (let day of config.reminders) {
      setTimeout(() => {
        sendMessage(coach, renderTemplate(config.templates.reminder, {
          coachName: coach.name,
          eventName: event.name,
          responseLink: `https://app/coach-response?eventId=${eventId}&coachId=${coach.id}`
        }));
      }, day * 24 * 60 * 60 * 1000);
    }
  }
}

export async function handleResponse(coachId, eventId, response) {
  if (response === 'accept') {
    await db.events.assignCoach(eventId, coachId);
    await db.coachOutreachLogs.update({ coachId, eventId }, { response: 'accept' });
  } else if (response === 'decline') {
    // find next coach
    const remaining = await db.coachOutreachLogs.find({ eventId, response: null });
    if (remaining.length > 0) {
      const next = remaining[0];
      await initiateOutreach(eventId, [next], { reminders: [1, 3], templates: {} });
    }
    await db.coachOutreachLogs.update({ coachId, eventId }, { response: 'decline' });
  }
}

export async function escalateUnanswered(eventId, config) {
  const logs = await db.coachOutreachLogs.find({ eventId, response: null });
  const now = Date.now();
  for (const log of logs) {
    if (now - new Date(log.timestamp).getTime() > config.handOffAfter * 86400000) {
      await db.coachOutreachLogs.update({ coachId: log.coachId, eventId }, { response: 'escalated' });
    }
  }
}

function renderTemplate(template, data) {
  return mustache.render(template, data);
}

async function sendMessage(coach, message) {
  if (coach.preferredChannel === 'email') {
    await transporter.sendMail({
      from: 'noreply@system.com',
      to: coach.email,
      subject: 'Event Coaching Opportunity',
      text: message
    });
  } else {
    await twilioClient.messages.create({
      body: message,
      from: process.env.TWILIO_NUMBER,
      to: coach.phone
    });
  }
}
✅ 3. API Routes
src/api/coach-match.js
js
Copy
Edit
import express from 'express';
import { findBestCoaches } from '../services/CoachMatchService.js';

const router = express.Router();

router.get('/api/coach-match', async (req, res) => {
  try {
    const { eventId, limit } = req.query;
    const coaches = await findBestCoaches(eventId, { limit: Number(limit) || 5 });
    res.json(coaches);
  } catch (e) {
    res.status(500).json({ error: e.message });
  }
});

export default router;
src/api/coach-outreach.js
js
Copy
Edit
import express from 'express';
import { initiateOutreach, handleResponse, escalateUnanswered } from '../services/CoachOutreachService.js';
import db from '../utils/db.js';

const router = express.Router();

router.post('/api/coach-outreach/initiate', async (req, res) => {
  const { eventId, coachIds, config } = req.body;
  const coaches = await db.coaches.findMany(coachIds);
  await initiateOutreach(eventId, coaches, config);
  res.json({ status: 'initiated' });
});

router.post('/api/coach-outreach/response', async (req, res) => {
  const { eventId, coachId, response } = req.body;
  await handleResponse(coachId, eventId, response);
  res.json({ status: 'updated' });
});

router.get('/api/coach-outreach/status', async (req, res) => {
  const { eventId } = req.query;
  const logs = await db.coachOutreachLogs.find({ eventId });
  res.json(logs);
});

export default router;
✅ 4. Admin Dashboard: PendingOffers.jsx
jsx
Copy
Edit
// src/modules/Admin/PendingOffers.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

export default function PendingOffers({ selectedEventId }) {
  const [offers, setOffers] = useState([]);
  const [filter, setFilter] = useState('');

  useEffect(() => {
    fetchStatus();
  }, [selectedEventId]);

  async function fetchStatus() {
    const { data } = await axios.get(`/api/coach-outreach/status?eventId=${selectedEventId}`);
    setOffers(data);
  }

  async function handleForceAssign(coachId) {
    await axios.post('/api/coach-outreach/response', { eventId: selectedEventId, coachId, response: 'accept' });
    fetchStatus();
  }

  async function handleReinitiate(coachId) {
    await axios.post('/api/coach-outreach/initiate', { eventId: selectedEventId, coachIds: [coachId], config: { reminders: [1, 3, 5], templates: {} } });
    fetchStatus();
  }

  const filtered = filter ? offers.filter(o => o.response === filter) : offers;

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Pending Offers</h1>
      <select onChange={(e) => setFilter(e.target.value)} className="border p-1 mb-4">
        <option value="">All</option>
        <option value="null">Pending</option>
        <option value="accept">Assigned</option>
        <option value="escalated">Escalated</option>
      </select>
      <table className="min-w-full border">
        <thead>
          <tr className="bg-gray-100">
            <th className="p-2 border">Coach Name</th>
            <th className="p-2 border">Attempts</th>
            <th className="p-2 border">Last Attempt</th>
            <th className="p-2 border">Status</th>
            <th className="p-2 border">Actions</th>
          </tr>
        </thead>
        <tbody>
          {filtered.map((offer) => (
            <tr key={offer.coachId}>
              <td className="p-2 border">{offer.coachName}</td>
              <td className="p-2 border">{offer.attemptNumber}</td>
              <td className="p-2 border">{new Date(offer.timestamp).toLocaleDateString()}</td>
              <td className="p-2 border">{offer.response || 'Pending'}</td>
              <td className="p-2 border space-x-2">
                <button onClick={() => handleReinitiate(offer.coachId)} className="bg-blue-500 text-white px-2 py-1 rounded">Re‑Initiate</button>
                <button onClick={() => handleForceAssign(offer.coachId)} className="bg-green-500 text-white px-2 py-1 rounded">Force Assign</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
✨ 5. Logging & Cleanup
Implement a cron job or scheduled task:

js
Copy
Edit
// Example: src/utils/cleanupLogs.js
import db from './db.js';

export async function purgeOldLogs() {
  const cutoff = new Date();
  cutoff.setFullYear(cutoff.getFullYear() - 1);
  await db.coachOutreachLogs.deleteWhere({ timestamp: { $lt: cutoff } });
}
Schedule purgeOldLogs() with node-cron or similar.

🤖 6. Dynamic NLP Messaging
Stub for OpenAI integration in CoachOutreachService.js:

js
Copy
Edit
// inside handleResponse
// after saving response:
if (response && response.includes('question')) {
  // Use OpenAI API to generate follow-up
  // const followUp = await openai.createChatCompletion(...)
  // sendMessage(coach, followUp)
}