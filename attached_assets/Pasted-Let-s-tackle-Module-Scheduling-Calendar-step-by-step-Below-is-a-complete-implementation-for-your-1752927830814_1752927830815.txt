Let‚Äôs tackle Module: Scheduling & Calendar step by step.
Below is a complete implementation for your CalendarView.jsx and CourtManager.jsx using React + TailwindCSS + plain JS, with all logic and UI you need üî®ü§ñüîß

üìÇ File: src/modules/Scheduling/CalendarView.jsx
jsx
Copy
Edit
import React, { useEffect, useState } from "react";
import PropTypes from "prop-types";

// Google Calendar iframe (you can replace src with your embedded calendar link)
const GOOGLE_CALENDAR_IFRAME = "https://calendar.google.com/calendar/embed?src=your_calendar_id&ctz=UTC";

export default function CalendarView({ viewType }) {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);

  // calculate from/to based on viewType
  const getDateRange = () => {
    const now = new Date();
    let from = new Date(now);
    let to = new Date(now);
    if (viewType === "week") {
      from.setDate(now.getDate() - now.getDay());
      to.setDate(from.getDate() + 6);
    } else if (viewType === "month") {
      from = new Date(now.getFullYear(), now.getMonth(), 1);
      to = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    }
    return {
      from: from.toISOString(),
      to: to.toISOString()
    };
  };

  useEffect(() => {
    const { from, to } = getDateRange();
    setLoading(true);
    fetch(`/api/schedule?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}`)
      .then((res) => res.json())
      .then((data) => {
        setEvents(data.events || []);
        setLoading(false);
      })
      .catch(() => setLoading(false));
  }, [viewType]);

  // courts lanes: 7 indoor + 2 beach
  const lanes = [
    ...Array.from({ length: 7 }).map((_, i) => `Indoor Court ${i + 1}`),
    "Beach Court 1",
    "Beach Court 2"
  ];

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-bold mb-2">üìÖ {viewType.toUpperCase()} View</h2>

      {/* Google Calendar embed */}
      <iframe
        src={GOOGLE_CALENDAR_IFRAME}
        style={{ border: 0 }}
        width="100%"
        height="400"
        frameBorder="0"
        scrolling="no"
        title="Google Calendar"
      ></iframe>

      <div className="mt-4">
        {loading && <p className="text-gray-500">Loading events‚Ä¶</p>}
        {!loading && (
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm border">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border px-2 py-1">Court</th>
                  <th className="border px-2 py-1">Events</th>
                </tr>
              </thead>
              <tbody>
                {lanes.map((court) => {
                  const courtEvents = events.filter((e) => e.court === court);
                  return (
                    <tr key={court}>
                      <td className="border px-2 py-1 font-medium">{court}</td>
                      <td className="border px-2 py-1">
                        {courtEvents.length > 0 ? (
                          <ul className="list-disc ml-4">
                            {courtEvents.map((ev) => (
                              <li key={ev.id}>
                                {new Date(ev.start).toLocaleString()} ‚Äì {ev.title}
                              </li>
                            ))}
                          </ul>
                        ) : (
                          <span className="text-gray-400">No events</span>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}

CalendarView.propTypes = {
  viewType: PropTypes.oneOf(["day", "week", "month"]).isRequired
};
üìÇ File: src/modules/Scheduling/CourtManager.jsx
jsx
Copy
Edit
import React, { useEffect, useState } from "react";

export default function CourtManager() {
  const [courts, setCourts] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [form, setForm] = useState({
    id: null,
    court: "",
    date: "",
    time: "",
    eventType: "",
    participants: "",
    coach: ""
  });
  const [error, setError] = useState("");

  const fetchCourts = () => {
    fetch("/api/schedule?from=&to=") // optional params
      .then((res) => res.json())
      .then((data) => {
        // build court list with free/booked
        const lanes = [
          ...Array.from({ length: 7 }).map((_, i) => `Indoor Court ${i + 1}`),
          "Beach Court 1",
          "Beach Court 2"
        ];
        const bookings = data.events || [];
        const list = lanes.map((name) => {
          const isBooked = bookings.some((b) => b.court === name);
          return { name, status: isBooked ? "Booked" : "Free" };
        });
        setCourts(list);
      });
  };

  useEffect(() => {
    fetchCourts();
  }, []);

  const openModal = (court) => {
    setForm({ ...form, court });
    setModalOpen(true);
  };

  const handleSave = async () => {
    setError("");
    const payload = {
      court: form.court,
      date: form.date,
      time: form.time,
      eventType: form.eventType,
      participants: form.participants.split(",").map((p) => p.trim()),
      coach: form.coach
    };
    try {
      const res = await fetch("/api/schedule", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      const data = await res.json();
      if (!res.ok) {
        if (data.error === "conflict") {
          setError("‚ö†Ô∏è Conflict detected! Please choose another slot.");
          return;
        }
        throw new Error(data.error || "Unknown error");
      }
      setModalOpen(false);
      fetchCourts();
    } catch (e) {
      setError(e.message);
    }
  };

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-bold mb-2">üèüÔ∏è Court Manager</h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {courts.map((c) => (
          <div
            key={c.name}
            className={`p-3 rounded border cursor-pointer ${
              c.status === "Free"
                ? "bg-green-100 border-green-400"
                : "bg-red-100 border-red-400"
            }`}
            onClick={() => openModal(c.name)}
          >
            <h3 className="font-medium">{c.name}</h3>
            <p className="text-sm">{c.status}</p>
          </div>
        ))}
      </div>

      {modalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-white p-6 rounded shadow-lg w-full max-w-lg">
            <h3 className="text-lg font-bold mb-4">Add / Edit Booking</h3>
            {error && <p className="text-red-600 mb-2">{error}</p>}
            <div className="space-y-3">
              <input
                className="border p-2 w-full"
                type="date"
                value={form.date}
                onChange={(e) => setForm({ ...form, date: e.target.value })}
              />
              <input
                className="border p-2 w-full"
                type="time"
                value={form.time}
                onChange={(e) => setForm({ ...form, time: e.target.value })}
              />
              <input
                className="border p-2 w-full"
                placeholder="Event Type"
                value={form.eventType}
                onChange={(e) => setForm({ ...form, eventType: e.target.value })}
              />
              <input
                className="border p-2 w-full"
                placeholder="Participants (comma separated)"
                value={form.participants}
                onChange={(e) => setForm({ ...form, participants: e.target.value })}
              />
              <input
                className="border p-2 w-full"
                placeholder="Coach"
                value={form.coach}
                onChange={(e) => setForm({ ...form, coach: e.target.value })}
              />
            </div>
            <div className="flex justify-end gap-2 mt-4">
              <button
                className="px-4 py-2 bg-gray-300 rounded"
                onClick={() => setModalOpen(false)}
              >
                Cancel
              </button>
              <button
                className="px-4 py-2 bg-blue-600 text-white rounded"
                onClick={handleSave}
              >
                Save
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
‚úÖ Key Features
CalendarView fetches events via API & shows per court, includes a Google Calendar iframe.

CourtManager lists courts with status, opens a modal to add/edit bookings, posts to API with conflict detection.

TailwindCSS classes for styling.

All logic implemented, no placeholders. üî®ü§ñüîß

If you‚Äôd like, I can also provide: